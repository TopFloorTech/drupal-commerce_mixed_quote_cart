<?php
use Drupal\commerce\PurchasableEntityInterface;
use Drupal\commerce_quote_cart\QuoteCartHelper;
use Drupal\commerce_price\Price;
use Drupal\commerce_product\Entity\ProductInterface;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;

/**
 * Implements hook_form_alter().
 */
function commerce_quote_cart_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'views_form_commerce_cart_form_') === 0) {
    /** @var \Drupal\views\ViewExecutable $view */
    $view = $form_state->getBuildInfo()['args'][0];

    foreach ($view->result as $resultRow) {
      if (!isset($resultRow->_entity)) {
        continue;
      }

      /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
      $order = $resultRow->_entity;

      if (QuoteCartHelper::isMixedCart($order)) {
        $form['actions']['convert'] = [
          '#type' => 'submit',
          '#value' => t('Convert to Quote'),
          '#submit' => ['commerce_quote_cart_submit_convert'],
          '#button_type' => 'primary',
          '#weight' => 0,
        ];
      }
    }
  }

  if (strpos($form_id, 'commerce_checkout_flow_') === 0) {
    $is_quote = !QuoteCartHelper::isPurchaseCart();

    $label = $is_quote ? 'Quote' : 'Order';
    $shipping_label = $is_quote ? 'Contact' : 'Shipping';

    if (isset($form['shipping_information'])) {
      $form['shipping_information']['#title'] = t($shipping_label . ' Information');
      $form['#attached']['library'][] = 'commerce_quote_cart/shipping-information';

      // Non-quote orders should only be able to go to US or CA
      if (isset($form['shipping_information']['shipping_profile']) && !$is_quote) {
        //$form['shipping_information']['shipping_profile']['#available_countries'] = ['US', 'CA'];
      }

      // Hide shipping information for quote orders
      if (isset($form['shipping_information']['shipments']) && $is_quote) {
        $form['shipping_information']['shipments']['#attributes']['class'][] = 'js-hide';
      }
    }

    if (isset($form['review']) && isset($form['review']['shipping_information'])) {
      $form['review']['shipping_information']['#title'] = str_replace('Shipping ', "$shipping_label ", $form['review']['shipping_information']['#title']);
    }

    if (isset($form['actions']['next'])) {
      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $nextValue */
      $nextValue = $form['actions']['next']['#value'];

      if (strtolower($nextValue->getUntranslatedString()) == 'pay and complete purchase') {
        $form['actions']['next']['#value'] = t('Complete ' . strtolower($label));
      }
    }

    if (isset($form['sidebar']['order_summary'])) {
      $form['sidebar']['order_summary']['summary_title'] = [
        '#type' => 'container',
        '#weight' => -1,
        'title' => [
          '#markup' => t("$label summary"),
        ]
      ];
    }
  }

  if (strpos($form_id, 'commerce_order_item_default_add_to_cart_') === 0) {
    $variation = commerce_quote_cart_get_current_variation($form_state->getStorage());

    if (empty($variation)) {
      return;
    }

    $availableForQuote = $variation->get('field_available_for_quote')->value || QuoteCartHelper::hasQuoteCart();
    $availableForPurchase = $variation->get('field_available_for_purchase')->value;

    $form['actions']['submit']['#access'] = (bool) $availableForPurchase;

    $form['actions']['quote'] = [
      '#type' => 'submit',
      '#value' => t('Quote'),
      '#submit' => ['commerce_quote_cart_submit_quote'],
      '#button_type' => 'primary',
      '#weight' => 6,
      '#access' => (bool) $availableForQuote
    ];
  }
}

function commerce_quote_cart_get_current_variation(array $storage) {
  if (isset($storage['selected_variation'])) {
    $variationId = $storage['selected_variation'];

    /** @var \Drupal\Core\Entity\ContentEntityInterface $variation */
    return \Drupal::entityTypeManager()->getStorage('commerce_product_variation')->load($variationId);
  }

  /** @var ProductInterface $product */
  $product = $storage['product'];

  return $product->getDefaultVariation();
}

function commerce_quote_cart_get_store(PurchasableEntityInterface $entity) {
  $stores = $entity->getStores();
  if (count($stores) === 1) {
    $store = reset($stores);
  }
  else {
    $store = \Drupal::service('commerce_store.store_context')->getStore();
    if (!in_array($store, $stores)) {
      // Indicates that the site listings are not filtered properly.
      throw new \Exception("The given entity can't be purchased from the current store.");
    }
  }

  return $store;
}

function commerce_quote_cart_submit_convert(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $form_state->getBuildInfo()['args'][0];

  foreach ($view->result as $resultRow) {
    if (!isset($resultRow->_entity)) {
      continue;
    }

    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
    $order = $resultRow->_entity;

    QuoteCartHelper::convertToQuote($order);
  }
}

function commerce_quote_cart_submit_quote(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\commerce_cart\Form\AddToCartForm $addToCartForm */
  $addToCartForm = $form_state->getBuildInfo()['callback_object'];

  /** @var \Drupal\commerce_order\Entity\OrderItemInterface $order_item */
  $order_item = $addToCartForm->getEntity();
  $order_item->set('field_quote', ['value' => "1"]);

  $addToCartForm->submitForm($form, $form_state);
}

/**
 * Implements hook_preprocess_block().
 */
function commerce_quote_cart_preprocess_block(&$variables) {
  if (in_array($variables['elements']['#id'], ['product_variations', 'product_variations_mobile'])) {
    $variables['label'] = commerce_quote_cart_block_label($variables);
  }

  if ($variables['plugin_id'] == 'page_title_block' && \Drupal::routeMatch()->getRouteName() == 'entity.commerce_order.user_view') {
    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
    $order = \Drupal::routeMatch()->getParameter('commerce_order');

    if ($order) {
      $title = QuoteCartHelper::isPurchaseCart($order) ? 'Order' : 'Quote';
      $variables['content']['#title'] = t($title . ' number: @order_number', ['@order_number' => $order->getOrderNumber()]);
    }
  }
}

/**
 * Implements hook_preprocess_commerce_order().
 */
function commerce_quote_cart_preprocess_commerce_order(&$variables) {
  commerce_quote_cart_populate_order_variables($variables);
}

/**
 * Implements hook_preprocess_commerce_order_receipt().
 */
function commerce_quote_cart_preprocess_commerce_order_receipt(&$variables) {
  commerce_quote_cart_populate_order_variables($variables);
}

/**
 * Implements hook_preprocess_commerce_checkout_completion_message().
 */
function commerce_quote_cart_preprocess_commerce_checkout_completion_message(&$variables) {
  commerce_quote_cart_populate_order_variables($variables);
}

function commerce_quote_cart_populate_order_variables(&$variables) {
  if (isset($variables['order_entity'])) {
    /** @var Drupal\commerce_order\Entity\OrderInterface $order */
    $order = $variables['order_entity'];

    $variables['order_label'] = \Drupal\commerce_quote_cart\QuoteCartHelper::isPurchaseCart($order) ? t('Order') : t('Quote');
    $variables['is_quote'] = !\Drupal\commerce_quote_cart\QuoteCartHelper::isPurchaseCart($order);

    if (isset($variables['order']['order_number']) && $variables['is_quote']) {
      $variables['order']['order_number']['#title'] = t('Quote number');
    }
  }
}

function commerce_quote_cart_block_label($variables) {
  $label = $variables['label'];

  $product = $variables['content']['content']['#commerce_product'];

  if ($product instanceof \Drupal\commerce_product\Entity\ProductInterface) {
    if (commerce_quote_cart_product_is_purchasable($product)) {
      $label = 'Add to Cart';
    }
  }

  return $label;
}

function commerce_quote_cart_product_is_purchasable(ProductInterface $product) {
  $purchasableField = 'field_available_for_purchase';
  $variations = $product->getVariations();

  $purchasable = FALSE;

  foreach ($variations as $variation) {
    if (!$variation->hasField($purchasableField) || $variation->get($purchasableField)->value) {
      $purchasable = TRUE;

      break;
    }
  }

  return $purchasable;
}

function commerce_quote_cart_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] == 'price') {
    /** @var FieldableEntityInterface $entity */
    $entity = $variables['element']['#object'];

    $purchasable = 'field_available_for_purchase';

    if ($entity->hasField($purchasable) && !$entity->get($purchasable)->value) {
      if (isset($variables['items'][0])) {
        $variables['items'][0]['content']['#markup'] = '';
      }
    }
  }
}

function commerce_quote_cart_entity_storage_load(array $entities, $entity_type) {
  if ($entity_type == 'commerce_order') {
    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
    foreach ($entities as $order) {
      $targetId = QuoteCartHelper::isPurchaseCart($order) ? 'default' : 'quote';
      $order->get('checkout_flow')->set(0, ['target_id' => $targetId]);
    }
  }
}

/**
 * Implements hook_commerce_shipping_methods_alter().
 */
function commerce_quote_cart_commerce_shipping_methods_alter(array &$shipping_methods, \Drupal\commerce_shipping\Entity\ShipmentInterface $shipment) {
  $shipping_methods = QuoteCartHelper::filterShippingMethods($shipping_methods, $shipment);
}
