<?php
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;

/**
 * Implements hook_form_alter().
 */
function commerce_mixed_quote_cart_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'commerce_order_item_default_add_to_cart_') === 0) {
    $variationId = $form_state->getStorage()['selected_variation'];

    /** @var \Drupal\Core\Entity\ContentEntityInterface $variation */
    $variation = \Drupal::entityTypeManager()->getStorage('commerce_product_variation')->load($variationId);

    $availableForQuote = $variation->get('field_available_for_quote')->value;
    $availableForPurchase = $variation->get('field_available_for_purchase')->value;

    $form['actions']['submit']['#access'] = (bool) $availableForPurchase;

    $form['actions']['quote'] = [
      '#type' => 'submit',
      '#value' => t('Quote'),
      '#submit' => ['commerce_mixed_quote_cart_submit_quote'],
      '#button_type' => 'primary',
      '#weight' => 6,
      '#access' => (bool) $availableForQuote
    ];
  }
}

function commerce_mixed_quote_cart_submit_quote(array &$form, FormStateInterface $form_state) {
  $variationId = $form_state->getStorage()['selected_variation'];

  /** @var \Drupal\Core\Entity\ContentEntityInterface $variation */
  $variation = \Drupal::entityTypeManager()->getStorage('commerce_product_variation')->load($variationId);

  // TODO: Figure out
  return;

  $data = [
    'purchased_entity' => $variation,
    'title' => $variation->label(),
    'quantity' => 1,
    'unit_price' => 0.00,
    'total' => '0.00',
  ];
  $order_item = \Drupal::entityTypeManager()->getStorage('commerce_order_item')->create($data);
  $order_item->save();

  return;

  $order_type = $this->orderTypeResolver->resolve($order_item);

  $store = $this->selectStore($variation);
  $cart = $this->cartProvider->getCart($order_type, $store);
  if (!$cart) {
    $cart = $this->cartProvider->createCart($order_type, $store);
  }
  $this->cartManager->addOrderItem($cart, $order_item, $form_state->get(['settings', 'combine']));

  drupal_set_message($this->t('@entity added to @cart-link.', [
    '@entity' => $variation->label(),
    '@cart-link' => Link::createFromRoute($this->t('your cart', [], ['context' => 'cart link']), 'commerce_cart.page')->toString(),
  ]));
}

function commerce_mixed_quote_cart_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] == 'price') {
    /** @var FieldableEntityInterface $entity */
    $entity = $variables['element']['#object'];

    $purchasable = 'field_available_for_purchase';

    if ($entity->hasField($purchasable) && !$entity->get($purchasable)->value) {
      if (isset($variables['items'][0])) {
        $variables['items'][0]['content']['#markup'] = '';
      }
    }
  }
}
