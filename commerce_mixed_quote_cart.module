<?php
use Drupal\commerce\PurchasableEntityInterface;
use Drupal\commerce_price\Price;
use Drupal\commerce_product\Entity\ProductInterface;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;

/**
 * Implements hook_form_alter().
 */
function commerce_mixed_quote_cart_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'commerce_order_item_default_add_to_cart_') === 0) {
    $variationId = $form_state->getStorage()['selected_variation'];

    /** @var \Drupal\Core\Entity\ContentEntityInterface $variation */
    $variation = \Drupal::entityTypeManager()->getStorage('commerce_product_variation')->load($variationId);

    $availableForQuote = $variation->get('field_available_for_quote')->value;
    $availableForPurchase = $variation->get('field_available_for_purchase')->value;

    $form['actions']['submit']['#access'] = (bool) $availableForPurchase;

    $form['actions']['quote'] = [
      '#type' => 'submit',
      '#value' => t('Quote'),
      '#submit' => ['commerce_mixed_quote_cart_submit_quote'],
      '#button_type' => 'primary',
      '#weight' => 6,
      '#access' => (bool) $availableForQuote
    ];
  }
}

function commerce_mixed_quote_cart_get_store(PurchasableEntityInterface $entity) {
  $stores = $entity->getStores();
  if (count($stores) === 1) {
    $store = reset($stores);
  }
  else {
    $store = \Drupal::service('commerce_store.store_context')->getStore();
    if (!in_array($store, $stores)) {
      // Indicates that the site listings are not filtered properly.
      throw new \Exception("The given entity can't be purchased from the current store.");
    }
  }

  return $store;
}

function commerce_mixed_quote_cart_submit_quote(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\commerce_cart\Form\AddToCartForm $addToCartForm */
  $addToCartForm = $form_state->getBuildInfo()['callback_object'];

  /** @var \Drupal\commerce_order\Entity\OrderItemInterface $order_item */
  $order_item = $addToCartForm->getEntity();
  $order_item->set('field_quote', ['value' => "1"]);

  $addToCartForm->submitForm($form, $form_state);

  /** @var \Drupal\commerce\PurchasableEntityInterface $purchased_entity */
  /*$purchased_entity = $order_item->getPurchasedEntity();

  $order_type = \Drupal::service('commerce_order.chain_order_type_resolver')->resolve($order_item);

  $cartProvider = \Drupal::service('commerce_cart.cart_provider');
  $cartManager = \Drupal::service('commerce_cart.cart_manager');

  $store = commerce_mixed_quote_cart_get_store($purchased_entity);
  $cart = $cartProvider->getCart($order_type, $store);
  if (!$cart) {
    $cart = $cartProvider->createCart($order_type, $store);
  }
  $cartManager->addOrderItem($cart, $order_item, $form_state->get(['settings', 'combine']));

  drupal_set_message(t('@entity added to @cart-link.', [
    '@entity' => $purchased_entity->label(),
    '@cart-link' => Link::createFromRoute(t('your quote cart', [], ['context' => 'cart link']), 'commerce_cart.page')->toString(),
  ]));*/
}

/**
 * Implements hook_preprocess_block().
 */
function commerce_mixed_quote_cart_preprocess_block(&$variables) {
  if ($variables['elements']['#id'] == 'product_variations') {
    $variables['label'] = commerce_mixed_quote_cart_block_label($variables);
  }
}

function commerce_mixed_quote_cart_block_label($variables) {
  $label = $variables['label'];

  $product = $variables['content']['content']['#commerce_product'];

  if ($product instanceof \Drupal\commerce_product\Entity\ProductInterface) {
    if (commerce_mixed_quote_cart_product_is_purchasable($product)) {
      $label = 'Add to Cart';
    }
  }

  return $label;
}

function commerce_mixed_quote_cart_product_is_purchasable(ProductInterface $product) {
  $purchasableField = 'field_available_for_purchase';
  $variations = $product->getVariations();

  $purchasable = FALSE;

  foreach ($variations as $variation) {
    if (!$variation->hasField($purchasableField) || $variation->get($purchasableField)->value) {
      $purchasable = TRUE;

      break;
    }
  }

  return $purchasable;
}

function commerce_mixed_quote_cart_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] == 'price') {
    /** @var FieldableEntityInterface $entity */
    $entity = $variables['element']['#object'];

    $purchasable = 'field_available_for_purchase';

    if ($entity->hasField($purchasable) && !$entity->get($purchasable)->value) {
      if (isset($variables['items'][0])) {
        $variables['items'][0]['content']['#markup'] = '';
      }
    }
  }
}
